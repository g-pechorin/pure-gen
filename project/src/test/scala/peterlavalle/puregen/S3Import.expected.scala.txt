package foo.bar

import java.util.Random

import org.graalvm.polyglot.{Context, HostAccess, Value}
import peterlavalle.Quick
import peterlavalle.Quick._
import peterlavalle.puregen.DeScriptPolyglot
import peterlavalle.puregen.DeScriptPolyglot._
import peterlavalle.puregen.core.AComponent

object S3Import {
	type Foo = Bar.Foo
	trait D {

		final lazy val foo_bar_S3Import = new S3Import(asInstanceOf[S3].context, asInstanceOf[S3].hook.pedal, asInstanceOf[S3].cycle) {
			protected def openAudioFeed(): () => Bar.Foo = foo_bar_S3Import_openAudioFeed()
			protected def openLogOut(a0: String): Bar.Foo => Unit = foo_bar_S3Import_openLogOut(a0)
		}

		/**
		 * add some action to happen BEFORE the cycle collects events
		 */
		def before(act: => Unit): Unit

		/**
		 * add some action to happen AFTER the cycle sends out signals
		 *
		 * @param act
		 */
		def follow(act: => Unit): Unit
		def onExit(act: => Unit): Unit

		protected def foo_bar_S3Import_openAudioFeed(): () => Bar.Foo
		protected def foo_bar_S3Import_openLogOut(a0: String): Bar.Foo => Unit
	}


}

abstract class S3Import
(
	context: Context,
	hook: AComponent#TPedal[_, _] => Unit,
	cycle: Runnable
) extends AComponent(context, hook, cycle) {
	import S3Import._


	override final def bindName: String = "foo.bar:S3Import"


	@HostAccess.Export
	final def _new_AudioFeed
	(
	): SampleAtomic[Bar.Foo] = new SampleAtomic[Bar.Foo](
		"S3Import/AudioFeed(" + ")",
		openAudioFeed()
	)

	@HostAccess.Export
	final def _new_LogOut
	(
		a0: String,
	): BehaviourAtomic[Bar.Foo] = new BehaviourAtomic[Bar.Foo](
		"S3Import/LogOut(" + a0 + ")",
		openLogOut(a0)
	)

	protected def openAudioFeed(): () => Bar.Foo
	protected def openLogOut(a0: String): Bar.Foo => Unit

}
